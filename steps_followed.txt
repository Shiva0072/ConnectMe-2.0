install express, mongoose, ejs, express-ejs-layouts
npm i --save-dev nodemon
make dirs : routes, models, controllers, config, views, assets
write the DB server
Write the experss server and  <CHECK>

Write the User_sign_up schema in models
Write a router [app.use("/",routefilePath) in index.js], controller and then call them from index. <CHECK>

Make some views with the help of ejs layouts. Set the middlewares in index.js
Acquire the express-ejs-layouts in index.js
set the view engine and views path dir 
use the express-ejs-layout as a middleware
app.use(expressLayouts); app.set("layout extractScripts", true); app.set('layout extractStyles', true);
make the _footer.ejs,_header.ejs and  layout.ejs 
finally make a view and render it through the controller <CHECK>

Commit to git. using the .gitignore

Create some more routes - userSignup and userSignin page
make some controllers, write some respective views and then call in the routes
Incase of forms, in the action we need to mention the "correct and complete route" [for the routes written across diff files]

==========================================================================================================================================================================================
Sending mails:-
https://dev.to/fawazsullia/how-to-send-email-with-node-js-for-free-4okc
Nodemailer is used to send the emails.
Create a nodemailer transporter object and use this object to send the emails. 
    Here, after creating the nodemailer object in Config file, we use it to send emails via function defined in mailers folder.
        This function for sending the emails is being called everytime when a new comment is made. We obviously need to send some info along with it [function argument]. 

Parallel Jobs:-
https://blog.jscrambler.com/queue-jobs-kue
Kue creates queues for several jobs( which are simulated as if running parallel). These are stored via redis in the RAM in JSON format[key-value pair].
Redis Server maintians the queues. We can say it is a DB maintianing delayed jobs. They could be stored in some permanent storage also. Ram is temporary. 
Kue is a Node.js package that provides a level of abstraction over Redis queues, as well as providing some useful tools for monitoring your jobs
Redis could also be used for caching. Say a video/post is going viral, it can cached in localStorage and everytime user requests for it, it would be sending infor w/o querying the dB.
Workers constantly ping the queues to take up the jobs based on their priority and complete them. Thus they handle queues.

Overall=> When a new comment is there, add this task(sending emails) to the queue. and then this queue runs the task via nodemialer. 
==========================================================================================================================================================================================

Password reset is one of the best way for revising the nodemailer and routing

Part 1: Sending email to the user for resetting the password with accessToken
    Create routes for entering the email of the user.
    Using this email, get the user from the dB and then create the token-doc using the TokenSchema.
    grab the accessToken and build the link. Send this link via mail to the user.
Part 2: Change the password
    Grab the access token. Inorder to make it available to the function to be called after the user enters the passwords
    we pass it into the form as a hidden tag and extract it later.(other ways are also possible).
    In the final stage, extract the token, and then get the user with this token and update the password.
==========================================================================================================================================================================================

Understanding the productionization:-
Understanding the environment variable : https://medium.com/chingu/an-introduction-to-environment-variables-and-how-to-use-them-f602f66d15fa

    Setting up Environment Variables Linux/Mac Os
Environment variables are added to the ‘.bash_profile’ directory,
for the current user.If bash profile doesnt exist we can create it at root.
One can use vim editor for viewing and editing environment
variables or any other editor aswell.
1. Open a new terminal
2. Type vi ~/.bash_profile  [to open the bash_profile in vim]
3. Now you can add desired environment variable by using the export
keyword. For e.g.
export USER_EMAIL="user@gmail.com"
export USER_PASSWORD="ConnectMe"
4. Now to save the bash_profile press Esc followed by ‘:wq’ (write
and quit)
5. Now refresh the variables loaded into the memory by typing: source ~/.bash_profile
6. Now These can now be used in the project using
userEmail = process.env.USER_EMAIL
userPassword = process.env.USER_PASSWORD

    Setting up Environment Variables Windows
1. To add environment variables in windows, go to start, search
environment variables
2. Now under system variables click on new
3. Now set the variable name what you require and also set the
values.For example set variable name as port and value as 8000
4. For using the environment variable in the project use
process.env.Variable_name (e.g. process.env.port )
OR 
in the terminal only: 
    $env:PROJECT_NAME_VARIABLE_NAME="value"       and enter.
eg: $env:CONNECTME_ENVIRONMENT="production"
    $env:CONNECTME_ASSET_PATH="/assets"
    $env:CONNECTME_SESSION_COOKIE_KEY="KmL1rsRE9x0z)RpE6ed}{y]1:*o2f,"
    $env:CONNECTME_GOOGLE_CLIENT_ID="723196947714-h85dk35up73doemn2dtf07st6p5l02s3.apps.googleusercontent.com" etc...

For both MAC and Windows:-
Type node (press enter) and then into that, type process.env to see all the variables.
These variables are loaded in the memory temporarily and get vanished on restart.
==========================================================================================================================================================================================





